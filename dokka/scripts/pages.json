[{"name":"BLACK","description":"Color.BLACK","location":"datastructures-kotlin/[root]/-color/-b-l-a-c-k/index.html","searchKeys":["BLACK","BLACK","Color.BLACK"]},{"name":"RED","description":"Color.RED","location":"datastructures-kotlin/[root]/-color/-r-e-d/index.html","searchKeys":["RED","RED","Color.RED"]},{"name":"abstract class Tree<K : Comparable<K>, V, T : Node<K, V, T>>","description":"common.Tree","location":"datastructures-kotlin/common/-tree/index.html","searchKeys":["Tree","abstract class Tree<K : Comparable<K>, V, T : Node<K, V, T>>","common.Tree"]},{"name":"abstract fun delete(key: K): Boolean","description":"common.Tree.delete","location":"datastructures-kotlin/common/-tree/delete.html","searchKeys":["delete","abstract fun delete(key: K): Boolean","common.Tree.delete"]},{"name":"abstract fun insert(key: K, value: V)","description":"common.Tree.insert","location":"datastructures-kotlin/common/-tree/insert.html","searchKeys":["insert","abstract fun insert(key: K, value: V)","common.Tree.insert"]},{"name":"abstract fun search(key: K): V?","description":"common.Tree.search","location":"datastructures-kotlin/common/-tree/search.html","searchKeys":["search","abstract fun search(key: K): V?","common.Tree.search"]},{"name":"abstract fun treeBFSIterator(): Iterator<T>","description":"common.Tree.treeBFSIterator","location":"datastructures-kotlin/common/-tree/tree-b-f-s-iterator.html","searchKeys":["treeBFSIterator","abstract fun treeBFSIterator(): Iterator<T>","common.Tree.treeBFSIterator"]},{"name":"abstract fun treeDFSIterator(): Iterator<T>","description":"common.Tree.treeDFSIterator","location":"datastructures-kotlin/common/-tree/tree-d-f-s-iterator.html","searchKeys":["treeDFSIterator","abstract fun treeDFSIterator(): Iterator<T>","common.Tree.treeDFSIterator"]},{"name":"class AVLTree<K : Comparable<K>, V> : Tree<K, V, AVLNode<K, V>> ","description":"trees.AVLTree","location":"datastructures-kotlin/trees/-a-v-l-tree/index.html","searchKeys":["AVLTree","class AVLTree<K : Comparable<K>, V> : Tree<K, V, AVLNode<K, V>> ","trees.AVLTree"]},{"name":"class BNode<K : Comparable<K>, V>(key: K, value: V) : Node<K, V, BNode<K, V>> ","description":"dto.BNode","location":"datastructures-kotlin/dto/-b-node/index.html","searchKeys":["BNode","class BNode<K : Comparable<K>, V>(key: K, value: V) : Node<K, V, BNode<K, V>> ","dto.BNode"]},{"name":"class BinarySearchTree<K : Comparable<K>, V> : Tree<K, V, BNode<K, V>> ","description":"trees.BinarySearchTree","location":"datastructures-kotlin/trees/-binary-search-tree/index.html","searchKeys":["BinarySearchTree","class BinarySearchTree<K : Comparable<K>, V> : Tree<K, V, BNode<K, V>> ","trees.BinarySearchTree"]},{"name":"class RBNode<K : Comparable<K>, V>(key: K, value: V) : Node<K, V, RBNode<K, V>> ","description":"RBNode","location":"datastructures-kotlin/[root]/-r-b-node/index.html","searchKeys":["RBNode","class RBNode<K : Comparable<K>, V>(key: K, value: V) : Node<K, V, RBNode<K, V>> ","RBNode"]},{"name":"class RedBlackTree<K : Comparable<K>, V> : Tree<K, V, RBNode<K, V>> ","description":"trees.RedBlackTree","location":"datastructures-kotlin/trees/-red-black-tree/index.html","searchKeys":["RedBlackTree","class RedBlackTree<K : Comparable<K>, V> : Tree<K, V, RBNode<K, V>> ","trees.RedBlackTree"]},{"name":"class TreeBFSIterator<K : Comparable<K>, V, T : Node<K, V, T>>(root: T?) : Iterator<T> ","description":"iterators.TreeBFSIterator","location":"datastructures-kotlin/iterators/-tree-b-f-s-iterator/index.html","searchKeys":["TreeBFSIterator","class TreeBFSIterator<K : Comparable<K>, V, T : Node<K, V, T>>(root: T?) : Iterator<T> ","iterators.TreeBFSIterator"]},{"name":"class TreeDFSIterator<K : Comparable<K>, V, T : Node<K, V, T>>(root: T?) : Iterator<T> ","description":"iterators.TreeDFSIterator","location":"datastructures-kotlin/iterators/-tree-d-f-s-iterator/index.html","searchKeys":["TreeDFSIterator","class TreeDFSIterator<K : Comparable<K>, V, T : Node<K, V, T>>(root: T?) : Iterator<T> ","iterators.TreeDFSIterator"]},{"name":"constructor()","description":"common.Tree.Tree","location":"datastructures-kotlin/common/-tree/-tree.html","searchKeys":["Tree","constructor()","common.Tree.Tree"]},{"name":"constructor()","description":"trees.AVLTree.AVLTree","location":"datastructures-kotlin/trees/-a-v-l-tree/-a-v-l-tree.html","searchKeys":["AVLTree","constructor()","trees.AVLTree.AVLTree"]},{"name":"constructor()","description":"trees.BinarySearchTree.BinarySearchTree","location":"datastructures-kotlin/trees/-binary-search-tree/-binary-search-tree.html","searchKeys":["BinarySearchTree","constructor()","trees.BinarySearchTree.BinarySearchTree"]},{"name":"constructor()","description":"trees.RedBlackTree.RedBlackTree","location":"datastructures-kotlin/trees/-red-black-tree/-red-black-tree.html","searchKeys":["RedBlackTree","constructor()","trees.RedBlackTree.RedBlackTree"]},{"name":"constructor(key: K, value: V)","description":"RBNode.RBNode","location":"datastructures-kotlin/[root]/-r-b-node/-r-b-node.html","searchKeys":["RBNode","constructor(key: K, value: V)","RBNode.RBNode"]},{"name":"constructor(key: K, value: V)","description":"dto.AVLNode.AVLNode","location":"datastructures-kotlin/dto/-a-v-l-node/-a-v-l-node.html","searchKeys":["AVLNode","constructor(key: K, value: V)","dto.AVLNode.AVLNode"]},{"name":"constructor(key: K, value: V)","description":"dto.BNode.BNode","location":"datastructures-kotlin/dto/-b-node/-b-node.html","searchKeys":["BNode","constructor(key: K, value: V)","dto.BNode.BNode"]},{"name":"constructor(key: K, value: V, left: T? = null, right: T? = null)","description":"dto.Node.Node","location":"datastructures-kotlin/dto/-node/-node.html","searchKeys":["Node","constructor(key: K, value: V, left: T? = null, right: T? = null)","dto.Node.Node"]},{"name":"constructor(root: T?)","description":"iterators.TreeBFSIterator.TreeBFSIterator","location":"datastructures-kotlin/iterators/-tree-b-f-s-iterator/-tree-b-f-s-iterator.html","searchKeys":["TreeBFSIterator","constructor(root: T?)","iterators.TreeBFSIterator.TreeBFSIterator"]},{"name":"constructor(root: T?)","description":"iterators.TreeDFSIterator.TreeDFSIterator","location":"datastructures-kotlin/iterators/-tree-d-f-s-iterator/-tree-d-f-s-iterator.html","searchKeys":["TreeDFSIterator","constructor(root: T?)","iterators.TreeDFSIterator.TreeDFSIterator"]},{"name":"enum Color : Enum<Color> ","description":"Color","location":"datastructures-kotlin/[root]/-color/index.html","searchKeys":["Color","enum Color : Enum<Color> ","Color"]},{"name":"fun isLeaf(): Boolean","description":"RBNode.isLeaf","location":"datastructures-kotlin/[root]/-r-b-node/is-leaf.html","searchKeys":["isLeaf","fun isLeaf(): Boolean","RBNode.isLeaf"]},{"name":"fun valueOf(value: String): Color","description":"Color.valueOf","location":"datastructures-kotlin/[root]/-color/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Color","Color.valueOf"]},{"name":"fun values(): Array<Color>","description":"Color.values","location":"datastructures-kotlin/[root]/-color/values.html","searchKeys":["values","fun values(): Array<Color>","Color.values"]},{"name":"open class AVLNode<K : Comparable<K>, V>(key: K, value: V) : Node<K, V, AVLNode<K, V>> ","description":"dto.AVLNode","location":"datastructures-kotlin/dto/-a-v-l-node/index.html","searchKeys":["AVLNode","open class AVLNode<K : Comparable<K>, V>(key: K, value: V) : Node<K, V, AVLNode<K, V>> ","dto.AVLNode"]},{"name":"open class Node<K : Comparable<K>, V, T>(var key: K, var value: V, var left: T? = null, var right: T? = null)","description":"dto.Node","location":"datastructures-kotlin/dto/-node/index.html","searchKeys":["Node","open class Node<K : Comparable<K>, V, T>(var key: K, var value: V, var left: T? = null, var right: T? = null)","dto.Node"]},{"name":"open operator override fun hasNext(): Boolean","description":"iterators.TreeBFSIterator.hasNext","location":"datastructures-kotlin/iterators/-tree-b-f-s-iterator/has-next.html","searchKeys":["hasNext","open operator override fun hasNext(): Boolean","iterators.TreeBFSIterator.hasNext"]},{"name":"open operator override fun hasNext(): Boolean","description":"iterators.TreeDFSIterator.hasNext","location":"datastructures-kotlin/iterators/-tree-d-f-s-iterator/has-next.html","searchKeys":["hasNext","open operator override fun hasNext(): Boolean","iterators.TreeDFSIterator.hasNext"]},{"name":"open operator override fun next(): T","description":"iterators.TreeBFSIterator.next","location":"datastructures-kotlin/iterators/-tree-b-f-s-iterator/next.html","searchKeys":["next","open operator override fun next(): T","iterators.TreeBFSIterator.next"]},{"name":"open operator override fun next(): T","description":"iterators.TreeDFSIterator.next","location":"datastructures-kotlin/iterators/-tree-d-f-s-iterator/next.html","searchKeys":["next","open operator override fun next(): T","iterators.TreeDFSIterator.next"]},{"name":"open override fun delete(key: K): Boolean","description":"trees.AVLTree.delete","location":"datastructures-kotlin/trees/-a-v-l-tree/delete.html","searchKeys":["delete","open override fun delete(key: K): Boolean","trees.AVLTree.delete"]},{"name":"open override fun delete(key: K): Boolean","description":"trees.BinarySearchTree.delete","location":"datastructures-kotlin/trees/-binary-search-tree/delete.html","searchKeys":["delete","open override fun delete(key: K): Boolean","trees.BinarySearchTree.delete"]},{"name":"open override fun delete(key: K): Boolean","description":"trees.RedBlackTree.delete","location":"datastructures-kotlin/trees/-red-black-tree/delete.html","searchKeys":["delete","open override fun delete(key: K): Boolean","trees.RedBlackTree.delete"]},{"name":"open override fun insert(key: K, value: V)","description":"trees.AVLTree.insert","location":"datastructures-kotlin/trees/-a-v-l-tree/insert.html","searchKeys":["insert","open override fun insert(key: K, value: V)","trees.AVLTree.insert"]},{"name":"open override fun insert(key: K, value: V)","description":"trees.BinarySearchTree.insert","location":"datastructures-kotlin/trees/-binary-search-tree/insert.html","searchKeys":["insert","open override fun insert(key: K, value: V)","trees.BinarySearchTree.insert"]},{"name":"open override fun insert(key: K, value: V)","description":"trees.RedBlackTree.insert","location":"datastructures-kotlin/trees/-red-black-tree/insert.html","searchKeys":["insert","open override fun insert(key: K, value: V)","trees.RedBlackTree.insert"]},{"name":"open override fun search(key: K): V?","description":"trees.AVLTree.search","location":"datastructures-kotlin/trees/-a-v-l-tree/search.html","searchKeys":["search","open override fun search(key: K): V?","trees.AVLTree.search"]},{"name":"open override fun search(key: K): V?","description":"trees.BinarySearchTree.search","location":"datastructures-kotlin/trees/-binary-search-tree/search.html","searchKeys":["search","open override fun search(key: K): V?","trees.BinarySearchTree.search"]},{"name":"open override fun search(key: K): V?","description":"trees.RedBlackTree.search","location":"datastructures-kotlin/trees/-red-black-tree/search.html","searchKeys":["search","open override fun search(key: K): V?","trees.RedBlackTree.search"]},{"name":"open override fun treeBFSIterator(): Iterator<AVLNode<K, V>>","description":"trees.AVLTree.treeBFSIterator","location":"datastructures-kotlin/trees/-a-v-l-tree/tree-b-f-s-iterator.html","searchKeys":["treeBFSIterator","open override fun treeBFSIterator(): Iterator<AVLNode<K, V>>","trees.AVLTree.treeBFSIterator"]},{"name":"open override fun treeBFSIterator(): Iterator<BNode<K, V>>","description":"trees.BinarySearchTree.treeBFSIterator","location":"datastructures-kotlin/trees/-binary-search-tree/tree-b-f-s-iterator.html","searchKeys":["treeBFSIterator","open override fun treeBFSIterator(): Iterator<BNode<K, V>>","trees.BinarySearchTree.treeBFSIterator"]},{"name":"open override fun treeBFSIterator(): Iterator<RBNode<K, V>>","description":"trees.RedBlackTree.treeBFSIterator","location":"datastructures-kotlin/trees/-red-black-tree/tree-b-f-s-iterator.html","searchKeys":["treeBFSIterator","open override fun treeBFSIterator(): Iterator<RBNode<K, V>>","trees.RedBlackTree.treeBFSIterator"]},{"name":"open override fun treeDFSIterator(): Iterator<AVLNode<K, V>>","description":"trees.AVLTree.treeDFSIterator","location":"datastructures-kotlin/trees/-a-v-l-tree/tree-d-f-s-iterator.html","searchKeys":["treeDFSIterator","open override fun treeDFSIterator(): Iterator<AVLNode<K, V>>","trees.AVLTree.treeDFSIterator"]},{"name":"open override fun treeDFSIterator(): Iterator<BNode<K, V>>","description":"trees.BinarySearchTree.treeDFSIterator","location":"datastructures-kotlin/trees/-binary-search-tree/tree-d-f-s-iterator.html","searchKeys":["treeDFSIterator","open override fun treeDFSIterator(): Iterator<BNode<K, V>>","trees.BinarySearchTree.treeDFSIterator"]},{"name":"open override fun treeDFSIterator(): Iterator<RBNode<K, V>>","description":"trees.RedBlackTree.treeDFSIterator","location":"datastructures-kotlin/trees/-red-black-tree/tree-d-f-s-iterator.html","searchKeys":["treeDFSIterator","open override fun treeDFSIterator(): Iterator<RBNode<K, V>>","trees.RedBlackTree.treeDFSIterator"]},{"name":"val entries: EnumEntries<Color>","description":"Color.entries","location":"datastructures-kotlin/[root]/-color/entries.html","searchKeys":["entries","val entries: EnumEntries<Color>","Color.entries"]},{"name":"var color: Color","description":"RBNode.color","location":"datastructures-kotlin/[root]/-r-b-node/color.html","searchKeys":["color","var color: Color","RBNode.color"]},{"name":"var height: Int","description":"dto.AVLNode.height","location":"datastructures-kotlin/dto/-a-v-l-node/height.html","searchKeys":["height","var height: Int","dto.AVLNode.height"]},{"name":"var key: K","description":"dto.Node.key","location":"datastructures-kotlin/dto/-node/key.html","searchKeys":["key","var key: K","dto.Node.key"]},{"name":"var left: T?","description":"dto.Node.left","location":"datastructures-kotlin/dto/-node/left.html","searchKeys":["left","var left: T?","dto.Node.left"]},{"name":"var parent: RBNode<K, V>?","description":"RBNode.parent","location":"datastructures-kotlin/[root]/-r-b-node/parent.html","searchKeys":["parent","var parent: RBNode<K, V>?","RBNode.parent"]},{"name":"var right: T?","description":"dto.Node.right","location":"datastructures-kotlin/dto/-node/right.html","searchKeys":["right","var right: T?","dto.Node.right"]},{"name":"var root: RBNode<K, V>?","description":"trees.RedBlackTree.root","location":"datastructures-kotlin/trees/-red-black-tree/root.html","searchKeys":["root","var root: RBNode<K, V>?","trees.RedBlackTree.root"]},{"name":"var value: V","description":"dto.Node.value","location":"datastructures-kotlin/dto/-node/value.html","searchKeys":["value","var value: V","dto.Node.value"]}]
